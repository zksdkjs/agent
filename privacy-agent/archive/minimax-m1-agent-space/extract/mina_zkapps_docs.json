{"extracted_information": "The Mina ecosystem offers two primary frameworks for building zkApps: o1js and Protokit. o1js is for zkApps on Mina L1, is TypeScript-based, and serves as a zkDSL for general-purpose zk circuits. Protokit is designed for ZK appchains and smart contracts, aiming for a familiar developer experience similar to Solidity dApps, suitable for high-throughput or multi-user applications requiring shared global state. The choice of framework depends on specific project requirements like throughput, concurrent user support, and state management needs. Security is emphasized, with recommendations for reviewing dedicated security documentation and conducting third-party audits before mainnet deployment. Detailed information on API structure, code examples, and client-side integration is referenced to external documentation links.", "specifications": {"o1js": {"purpose": "Building zkApps on the Mina L1 and new infrastructure such as rollups.", "language_base": "TypeScript", "capabilities": ["Writing general-purpose zk circuits", "Constructing new primitives and data structures"], "considerations": ["Subject to protocol throughput limitations", "Requires specific architecture for multiple concurrent users to avoid race conditions", "Experimental Offchain Storage API for managing more than eight on-chain field elements (if state not shared)", "No easy-to-use equivalent for shared global state in L1 contracts currently"]}, "Protokit": {"purpose": "Building ZK appchains and smart contracts that are user-facing, privacy-preserving, and interoperable.", "developer_experience": "Familiar, similar to Solidity dApps.", "provides_tools_for": ["zkApps that require high throughput or multiple concurrent users", "zkApps that require shared or global state access", "Developers familiar with execution environments such as EVM", "Developers who wish to leverage the modular architecture of Protokit"]}}, "pricing": {}, "features": [{"feature": "Censorship resistance", "o1js": "Decentralized and censorship resistant.", "protokit": "Censorship resistance via hybrid sequencing model."}, {"feature": "Support for multi-user apps", "o1js": "Many multi-user use cases require sophisticated architecture and are limited by L1 throughput.", "protokit": "Capable of handling higher throughput and multiple concurrent users, thanks to Protokit's modular sequencer."}, {"feature": "Execution environment", "o1js": "Proving off-chain, verification on-chain, transaction ordering possible on-chain.", "protokit": "Hybrid execution model, both on-chain (sequencer) and off-chain thanks to recursive zk-proofs, verification on-chain (MINA L1)."}, {"feature": "Developer experience (DX)", "o1js": "New programming model, distinct from traditional web3.0 development.", "protokit": "Module oriented app-chain development, similar to Substrate Pallets, Cosmos SDK Modules or EVM smart contracts."}, {"feature": "Composability", "o1js": "Fully composable. Contracts can call other contracts directly within a single transaction.", "protokit": "Protokit supports bi-directional L2 â†” L1 messaging out of the box."}], "statistics": {}, "temporal_info": {"production_readiness": {"o1js": "v1.0 released, internal audit complete, 3rd party audit in progress.", "protokit": "Beta release, internal audit in progress, 3rd party audit not started. Testnet only."}}, "geographical_data": {}, "references": [{"topic": "Security and zkApps", "link": "/zkapps/writing-a-zkapp/introduction-to-zkapps/secure-zkapps", "notes": "Information to consider for secure zkApp architecture, recommendation for third-party security audit before mainnet deployment."}, {"topic": "o1js Developer documentation", "link": "/zkapps/o1js"}, {"topic": "o1js repository (code examples)", "link": "https://github.com/o1-labs/o1js"}, {"topic": "Protokit Developer documentation", "link": "https://protokit.dev/docs/what-is-protokit"}, {"topic": "Protokit repository (code examples)", "link": "https://github.com/proto-kit"}, {"topic": "Protokit Starter Kit (code examples)", "link": "https://github.com/proto-kit/starter-kit"}, {"topic": "Front End Integration Guides", "link": "/zkapps/front-end-integration-guides/angular", "notes": "Mentioned in navigation, relevant for client-side interaction."}]}