{"raw_content": "{\n  \"data\": {\n    \"extracted_information\": \"o1js is a TypeScript library designed for writing general-purpose zero-knowledge (zk) programs and zk smart contracts for the Mina Protocol. It functions as an embedded domain-specific language (DSL), where standard TypeScript code is executed natively. The library provides 'provable' data types and methods, enabling the creation of zero-knowledge proofs where execution can be verified without revealing inputs or execution traces. Parts of the proof can be made public as needed.\\n\\nAPI Structure (as hinted by capabilities and examples):\\no1js includes core types like `Field` and modules like `Poseidon`. It offers a rich set of built-in provable operations, including basic arithmetic, hashing, signatures, boolean operations, and comparisons. Advanced provable functionalities for structures like Merkle Tree, Indexed Merkle Map, Keccak, ECDSA, and SHA-256 are also part of the framework.\\n\\nCode Example (Simple Private Transaction Concept):\\nThe following TypeScript code snippet demonstrates a provable function (`knowsPreimage`) that can be used to prove knowledge of a secret value (preimage) whose hash is publicly known, without revealing the secret itself. This embodies the concept of a simple private transaction or secret proof:\\ntypescript\\nimport { Field, Poseidon } from 'o1js';\\nfunction knowsPreimage(preimage: Field) {\\n  let hash = Poseidon.hash([preimage]);\\n  hash.assertEquals(expectedHash);\\n}\\nconst expectedHash = 0x1d444102d9e8da6d566467defcc446e8c1c3a3616d059facadbfd674afbc37ecn;\\n\\nIn this example, `Poseidon.hash()` and `Field.assertEquals()` are highlighted as provable methods.\\n\\nDeveloper Flows:\\nThe recommended way to begin writing zkApps with o1js is by utilizing the `zkApp CLI`. o1js can also be installed directly via npm (`npm i o1js`). Further details on developer flows, including compilation, proving, and deployment, are indicated to be available in linked documentation (e.g., 'how to write a zkApp').\\n\\nClient-Side Application Interaction:\\no1js is packaged as a single TypeScript library, making it fully compatible for use in major web browsers and Node.js environments. This inherent compatibility facilitates client-side integration. Specific \"Front End Integration Guides\" (e.g., for Angular) are available in the broader documentation for detailed interaction patterns.\",\n    \"specifications\": {\n      \"language\": \"TypeScript\",\n      \"platform_compatibility\": [\n        \"Web Browsers\",\n        \"Node.js\"\n      ],\n      \"installation_method\": \"npm\",\n      \"npm_command\": \"npm i o1js\",\n      \"purpose\": [\n        \"General-purpose zero-knowledge (zk) program writing\",\n        \"zk smart contract development for Mina\"\n      ],\n      \"architecture\": \"Embedded Domain-Specific Language (DSL)\"\n    },\n    \"pricing\": {},\n    \"features\": [\n      \"Provable data types and methods\",\n      \"Zero-knowledge proof generation and verification\",\n      \"Built-in provable operations: basic arithmetic, hashing, signatures, boolean operations, comparisons\",\n      \"Core provable types/modules: Field, Poseidon\",\n      \"Advanced provable operations: Merkle Tree, Indexed Merkle Map, Keccak, ECDSA, SHA-256\",\n      \"Client-side execution for zkApps with private inputs\"\n    ],\n    \"statistics\": {},\n    \"temporal_info\": {},\n    \"geographical_data\": {},\n    \"references\": [\n      {\n        \"type\": \"security_audit\",\n        \"name\": \"Veridise external audit (Q3 2024)\",\n        \"url\": \"https://github.com/o1-labs/o1js/blob/a09c5167c4df64f879684e5af14c59cf7a6fce11/audits/VAR_o1js_240318_o1js_V3.pdf\",\n        \"details\": \"39 person-weeks review, all medium severity and higher issues fixed for o1js version 1.\"\n      },\n      {\n        \"type\": \"security_audit\",\n        \"name\": \"Internal audit (Q1 2024)\",\n        \"url\": \"https://github.com/o1-labs/o1js/files/15192821/Internal.o1js.audit.Q1.2024.pdf\",\n        \"details\": \"Roughly 2 person-weeks, focused on core provable code, issues found and fixed.\"\n      },\n      {\n        \"type\": \"documentation_link\",\n        \"name\": \"How to write a zkApp (using zkApp CLI)\",\n        \"url\": \"/zkapps/writing-a-zkapp/introduction-to-zkapps/how-to-write-a-zkapp\"\n      },\n      {\n        \"type\": \"documentation_link\",\n        \"name\": \"Basic zk programming concepts\",\n        \"url\": \"/zkapps/o1js/basic-concepts\"\n      },\n      {\n        \"type\": \"documentation_link\",\n        \"name\": \"Security and zkApps\",\n        \"url\": \"/zkapps/writing-a-zkapp/introduction-to-zkapps/secure-zkapps\"\n      },\n      {\n        \"type\": \"documentation_link\",\n        \"name\": \"Front End Integration Guides (Angular example)\",\n        \"url\": \"/zkapps/front-end-integration-guides/angular\"\n      }\n    ]\n  }\n}"}