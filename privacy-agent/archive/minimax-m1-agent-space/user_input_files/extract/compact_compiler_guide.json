{"extracted_information": "Information about Compact compiler setup, language features, and code examples for Midnight development is present.", "specifications": {"compiler_requirements": {"os_support": ["Linux", "macOS"], "glibc_version": "2.35 or greater"}, "generated_files": {"contract": "TypeScript/JavaScript API definitions for the contract", "zkir": "Intermediate representations for the circuits", "keys": "Prover and verifier keys for each circuit"}}, "pricing": {}, "features": [{"name": "Domain-Specific Language (DSL)", "description": "Based on TypeScript, used to write smart contracts on the Midnight protocol."}, {"name": "Concise Expression", "description": "Allows for concise expression of contracts."}, {"name": "TypeScript Integration", "description": "Integrates seamlessly with TypeScript for DApp business logic development."}, {"name": "Privacy-Preserving", "description": "Empowers developers to create privacy-preserving smart contracts using zero-knowledge proofs (ZKPs)."}, {"name": "Public State Declaration", "description": "Uses 'ledger' to define public state variables (e.g., 'round' of type 'Counter')."}, {"name": "Circuit Functions", "description": "Defines public operations (transition functions) using 'export circuit' (e.g., 'increment()')."}, {"name": "Standard Library Inclusion", "description": "Uses 'include \"std\";' for standard functionalities."}, {"name": "Advanced Constructs", "description": "Supports enumerations, structured types, multiple circuits."}, {"name": "Private State Manipulation", "description": "Through witness functions (not detailed in examples)."}, {"name": "VSCode Extension", "description": "Provides syntax highlighting, live dynamic checking, and templates for Compact contracts."}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [{"name": "Midnight Documentation", "url": "https://docs.midnight.network/"}], "setup_guide": {"compiler_installation": ["Download Compact compiler from Midnight devnet releases repository (Linux or macOS).", "Unzip the downloaded package into a directory (e.g., '~/my-binaries/compactc').", "Verify installation by running './compactc --version'.", "Ensure GNU C Library (glibc) version 2.35 or greater is installed ('ldd --version').", "Set 'COMPACT_HOME' environment variable to the compiler directory.", "Add the compiler directory to your 'PATH' variable."], "macos_specific_steps": ["Authorize 'compactc' by right-clicking in Finder, selecting Open, and confirming.", "Allow 'compactc' in System Settings > Privacy & Security.", "Repeat authorization for 'zkir'."], "vscode_extension_installation": ["Download the VSCode extension from the Midnight devnet releases repository.", "Open Extensions pane in VSCode.", "Click '...' symbol and select 'Install from VSIXâ€¦'.", "Locate and install the downloaded file."]}, "code_examples": {"compiler_commands": ["mkdir ~/my-binaries/compactc", "cd ~/my-binaries/compactc", "unzip ~/Downloads/compactc-<platform>.zip", "./compactc --version", "ldd --version", "export COMPACT_HOME='/absolute/path/to/compactc'"], "simple_counter_contract": "include \"std\";\n\nledger {\n  // public state\n  round: Counter;\n}\n\n// transition function changing public state\nexport circuit increment(): Void {\n  ledger.round.increment(1);\n}", "detailed_counter_contract": "include \"std\";\nledger {\n  // public state\n  round: Counter;\n}\n\nexport circuit increment(): Void {\n  ledger.round.increment(1);\n}"}}