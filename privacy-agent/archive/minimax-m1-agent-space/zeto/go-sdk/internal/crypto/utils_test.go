// Copyright Â© 2024 Kaleido, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package crypto

import (
	"encoding/hex"
	"math/big"
	"testing"

	"github.com/iden3/go-iden3-crypto/constants"
	"github.com/stretchr/testify/assert"
)

func TestNewSalt(t *testing.T) {
	salt := NewSalt()
	assert.NotNil(t, salt)
	max := constants.Q
	assert.Less(t, salt.Cmp(max), 0)
}

func TestNewEncryptionNonce(t *testing.T) {
	nonce := NewEncryptionNonce()
	assert.NotNil(t, nonce)
	max, _ := new(big.Int).SetString("340282366920938463463374607431768211456", 10)
	assert.Less(t, nonce.Cmp(max), 0)
}

func TestBytesToBits(t *testing.T) {
	data := []byte{0x01, 0x02, 0x03}
	bits := BytesToBits(data)
	expectedBits := []uint8{
		1, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 0, 0, 0, 0, 0, 0,
		1, 1, 0, 0, 0, 0, 0, 0,
	}
	assert.Equal(t, expectedBits, bits)
}

func TestBitsToBytes(t *testing.T) {
	bits := []uint8{
		1, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 0, 0, 0, 0, 0, 0,
		1, 1, 0, 0, 0, 0, 0, 0,
	}
	bytes, err := BitsToBytes(bits)
	assert.NoError(t, err)
	expectedBytes := []byte{1, 2, 3}
	assert.Equal(t, expectedBytes, bytes)

	invalidBits := []uint8{1, 0, 0, 0, 0, 0, 0} // not a multiple of 8
	_, err = BitsToBytes(invalidBits)
	assert.EqualError(t, err, "bits length must be a multiple of 8, got 7")
}

func TestRecoverMlkemCiphertextBytes(t *testing.T) {
	ctStrs := []string{
		"332640836561318196418877187886999752488207783014031553729811067334904108118",
		"395850513284834091225565873390935459072862895125720422884594715739339037285",
		"348081801898737039508684106196276507712130929159901842219360607041531067966",
		"100954597121976502153460299107995174888225540458134746289157819940975434842",
		"220730542963407319768723718944304657583371727846816771416645979448723397749",
		"347958063069961866668611981823847695928386460948850350072218679198900976515",
		"188679315672653039465537595857972022040499001538353703705239511565258716660",
		"422969081046910274513654165430706569052268844898043180648462778848080915917",
		"251442469770932122491998814945054639627462645313399530335774294300801568387",
		"266294862201644803588237900234308920649692382970302966596053045442481233068",
		"420036973513148706790202379594956478190187120230643418142174319285003273017",
		"307022484104113864533506306827333314791014952172315737833482791751462205914",
		"68477858030954818731582127497537533451089280189256692152577974364031775607",
		"71765701999859358510969162697614093579000208306790815250377440538357139458",
		"53536127335168002724222390187223226763406455047184268861875417591803484872",
		"381368712437210763955499009732091967111602109452711648938519823961796473097",
		"122557411590194404676460552076441167890425862632700917878647167606804347229",
		"363307224356842369659057195955965720409925833327456760142109840500830105706",
		"439803472290855147495802019928434523504154557841957662981287702295595707493",
		"44759017967799861649135487497731292905794893753893303436779689211641590301",
		"366930704009538221690252394005178444430709929752315852848565770271603565764",
		"438006420618535679490984506258380931838266027274149142465613386559398411406",
		"201040717238655276261943396575679021510307278334631879919138884605735702370",
		"361029125128507322963806752951817309516364356864814684777041820101800830576",
		"4037737524536047631545229857980006034292825319665534247916",
	}
	ctBytes, err := RecoverMlkemCiphertextBytes(ctStrs)
	assert.NoError(t, err)
	assert.Equal(t, 768, len(ctBytes))

	ctBytesHex := hex.EncodeToString(ctBytes)
	expectedCtBytesHex := "56d44524a20ef707f285b82c827ac50854dce4b1a4d2730b6bff925e9e44bc651ab33a0fcf6e70a4b658295add7f9bd391e7ed6823d627bd0517961f0be03ebec2ff017fa8fabab50c5afd8958c95bd6ce69e4d6e29998dffe9adf01c55a5c747c937904abc220627647249f1b651b41d2db55c2379fb53720662339755cbcf321c83e240adc83a1c9a6e03f43807990e6a09050e37244e0d6ed7c837b22c7aa1ea30e0cd8bf1e69a00f51f27bd8490be89676576e90e0f1efc4f4f59b0b3151661c8cfa9d87770ffbd6607531b2a4406c9b807a31c8e8c96acd6d0d2adcce901ad75a0e308d7715f195e5348f1828dcc60255712b5b64ef830eff3814d3f1343e02087687f8931b6c557edc15f3557ee3fcde8db74f8eac1c9cc6b2f4094e6a3d5a2e6beaa6ea66681e19651dcbd54e2c6268b1b79639c3d681c399542fc9e476f8dff8088dd62663d77046f20c03d0b74185bbeddab968d02e103691aeabbc0f997795f35f77373aa28f2aa7023648ddc0c4ad777345a5204561af41eaf4f88c7127ddf63d4e027ac747c1cf7704ecd0c1260208a4d9ac36a8d956b4b71de6bee66a4a7abfe8bfea4ac8776329d5319e28c81a6778e6819a1c6771d30e5c2572ec9c69154251bd214bffeaf453e54c1e0971057d774b55ffd71ed5ae1d3b2234cdcbe022db72ecc77f8b0fbdd7d8d75d79ce790f23b352ea1e4eff6e0ae02a5764009a60a4ba1f98e97f0c735d456af065a66d22fbe6fe88b3698305f959d7b3635ebceec3928e8367e9e59fcd65ecff12efc99982eafe9e32fe1a9d8a3337d0af6d831e9c164df57181ebf81df2c9d926d30f15e7476711f1b7d8cb7d3db335ec70d530fdcf583f2c5519c42428c2a6c60fec498bf7ba1ee190c71f2a270676c8fe811502ec3de8accf8efc54bd5f99735d71838835c8a27f609bfdd499a4f3e88a17a20f1821e7f7628f017c1301c21d5911d53140f676b2eac861e7bca558ca5b1f32a6f6c87170265308fd2423d32cba09c665bb87d7c9bcaab79ed238244aa2d983d255ccec23a0977be7712930c83075ec9fbcbc72a9e13b5df2aba4"
	assert.Equal(t, expectedCtBytesHex, ctBytesHex)

	ctStrsBad := []string{
		"bad number",
	}
	_, err = RecoverMlkemCiphertextBytes(ctStrsBad)
	assert.EqualError(t, err, "failed to parse big.Int from string: bad number")

	ctStrsBad = []string{
		"332640836561318196418877187886999752488207783014332640836561318196418877187886999752488207783014",
		"332640836561318196418877187886999752488207783014",
	}
	_, err = RecoverMlkemCiphertextBytes(ctStrsBad)
	assert.EqualError(t, err, "expected ciphertext to be up to 31 bytes, got 40 bytes")

	ctStrsBad = ctStrs[:len(ctStrs)-1]
	ctStrsBad[len(ctStrsBad)-1] = "403773752453604763154522985798000603429282531966553424332640836561318196418877187886999752488207783014"
	_, err = RecoverMlkemCiphertextBytes(ctStrsBad)
	assert.EqualError(t, err, "expected last ciphertext to be up to 24 bytes, got 43 bytes")
}

func TestPublicKeyFromSeed(t *testing.T) {
	seed := []byte{
		0x3, 0x32, 0xd0, 0xc6,
		0x6f, 0x6a, 0xbb, 0xd9,
		0x97, 0x7, 0x6f, 0xef,
		0x34, 0x60, 0xa2, 0x98,
		0x9e, 0xad, 0xb7, 0xc0,
		0xa6, 0x4d, 0xab, 0x10,
		0x17, 0xea, 0x7e, 0x69,
		0xbf, 0x7b, 0x6e, 0x30,
	}
	pubKey, err := PublicKeyFromSeed(seed)
	assert.NoError(t, err)
	assert.NotNil(t, pubKey)
	assert.Equal(t, "15589970679295894726228874612642702147853131573633572775239786205658473744869", pubKey.X.String())
	assert.Equal(t, "5617588691247570736924114591546951390779921867038937705485032087352958370040", pubKey.Y.String())
}
