{"extracted_information": "Midnight is a privacy-first sidechain built on Cardano, designed for smart contracts handling both public and private data. Its development process leverages zero-knowledge proofs (ZKPs), a local proof server, and a purpose-built, statically typed language called Compact. Developers write contract logic in Compact and can build applications with TypeScript. The core principle is that sensitive private inputs never touch the blockchain; instead, a local proof server generates a ZKP, which is then verified on-chain, preserving data confidentiality. The platform uses a dual-token structure with NIGHT for staking/governance and DUST for computational resources (contract execution).", "specifications": {"platform_type": "Privacy-first sidechain", "base_chain": "Cardano", "privacy_mechanism": "Zero-Knowledge Proofs (ZKPs)", "private_data_handling": "Local proof server for ZKP generation; private inputs remain off-chain.", "programming_language": "Compact DSL (statically typed, purpose-built)", "application_development_language": "TypeScript", "tokens": {"NIGHT": "Staking and governance asset, secures the network, validates blocks.", "DUST": "Computational resource token, used for smart contract execution."}, "development_requirements": {"recommended_browser": "Google Chrome (version 119 or higher) for Lace Wallet compatibility", "node_js_version": "v18+ (via NVM recommended)", "proof_server_setup": "Docker (command: `docker run -p 6300:6300 midnightnetwork/proof-server — 'midnight-proof-server –network testnet'`)", "compact_compiler_installation": "Download and unzip compiler, set `COMPACT_HOME` and `PATH` environment variables.", "compiler_command": "`compactc <contract_file.compact>` (e.g., `compactc counter.compact`)", "deployment_command_cli": "`midnight deploy –contract <artifact.json> –wallet <your-wallet-address> –network testnet`"}, "contract_characteristics": {"immutability_post_deployment": "Cannot be modified once deployed, requiring design for versioning, modularity, and upgrade strategy."}}, "features": [{"name": "Zero-Knowledge Private Input Verification", "description": "Processes sensitive user data locally; cryptographic proof submitted instead of raw data. Contract verifies proof, not data, for state changes. Supports compliance-heavy use cases."}, {"name": "Compact DSL for Contract Logic", "description": "Purpose-built, statically typed language optimized for handling both public and private data. Enforces strict control over input types, transitions, and state changes. Supports circuit definition for privacy validation and local proof generation."}, {"name": "Dual Token Structure", "description": "Separates staking/governance (NIGHT) from computational resources (DUST), reducing gas-model friction and providing predictability for developers."}, {"name": "Local Proof Server Execution", "description": "Required for transactions involving private data; generates ZKPs offline on the user's machine, ensuring data never leaves the local environment or touches the blockchain directly."}, {"name": "Integration with Cardano Ecosystem", "description": "Functions as a sidechain, allowing cross-chain compatibility with existing Cardano infrastructure (e.g., Lace wallet, DID support)."}, {"name": "Concurrent Smart Contract Execution", "description": "Supports multiple users interacting with the same contract simultaneously, reducing wait times and avoiding execution bottlenecks by isolating conflicting actions as transcripts."}, {"name": "Developer-Centric Tooling and Workflow", "description": "SDK provides structured tools for building, testing, and deploying. Includes TypeScript support, local proof generation, and a VS Code extension for debugging, validating, and iterating."}, {"name": "Purpose-Built for Data-Sensitive Use Cases", "description": "Designed for industries requiring confidentiality (healthcare, TradFi, identity systems) by never revealing sensitive data on-chain, only cryptographic proofs."}, {"name": "Active DevNet Support for Rapid Testing", "description": "Provides a stable testbed for compiling, deploying, and interacting with contracts safely, supporting full proof generation, DUST-based execution, and wallet interactions without live data exposure."}, {"name": "Regulatory Compliance Ready by Design", "description": "Offers precise control over data exposure through selective disclosure and proof-based compliance without storing personal data, supporting frameworks like GDPR, HIPAA, and KYC."}], "statistics": {}, "temporal_info": {"blog_post_date": "July 22, 2025"}, "geographical_data": {}, "references": [], "comparisons": [{"feature": "Data Privacy", "midnight": "Private inputs processed locally via zero-knowledge proofs", "traditional_smart_contracts": "All inputs and outputs are stored publicly on-chain"}, {"feature": "Computation Model", "midnight": "Proof-based validation with local processing", "traditional_smart_contracts": "On-chain computation of all contract logic"}, {"feature": "Programming Language", "midnight": "Compact DSL (privacy-first, statically typed)", "traditional_smart_contracts": "Solidity, Vyper, Rust (general-purpose)"}, {"feature": "Execution Transparency", "midnight": "Proofs reveal validity, not the data itself", "traditional_smart_contracts": "Full transaction details are visible to everyone"}, {"feature": "Token Structure", "midnight": "NIGHT (staking) + DUST (execution resource)", "traditional_smart_contracts": "Typically a single gas token (e.g., ETH for Ethereum)"}, {"feature": "Proof Server Requirement", "midnight": "Requires a local server to generate privacy-preserving proofs", "traditional_smart_contracts": "No external components needed for execution"}, {"feature": "Use Case Fit", "midnight": "Ideal for regulated apps, compliance-heavy use cases", "traditional_smart_contracts": "Strong for open finance, DAOs, and NFTs"}, {"feature": "User Control Over Disclosure", "midnight": "Users choose what data to reveal and to whom", "traditional_smart_contracts": "All contract and input data are visible by default"}]}