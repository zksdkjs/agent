// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Verifier_AnonNullifierQurrencyTransferBatch {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;

    
    uint256 constant IC0x = 18162192914311761476568218159012761576266848579401767013690252317622376110706;
    uint256 constant IC0y = 20568385148614564370522466377423628380915271269243674334713565295257186320089;
    
    uint256 constant IC1x = 8058972069952547297918418170107203819468178379159733526866016416080785657823;
    uint256 constant IC1y = 10121050221671983974369338850383679050977553719766134817438114668249861041614;
    
    uint256 constant IC2x = 6084821941740497751810573480114372841126514711710913726464056454618000732117;
    uint256 constant IC2y = 21622119650197791685830835785980109914694081768272028859971935921432710509558;
    
    uint256 constant IC3x = 3717585478481073635940910349095139889021775711909641765314349305634069561245;
    uint256 constant IC3y = 10656456489533820974687950220079025293096336987093749795626566435339526597599;
    
    uint256 constant IC4x = 12885520313421194815572687629130246336795829158247350850258201573181063535018;
    uint256 constant IC4y = 17167938868817350497090364948938074809664641000042813961027712016497679751620;
    
    uint256 constant IC5x = 17158258264314533398064442148235051254124851759014876366483149711696593828131;
    uint256 constant IC5y = 21479152194347550342220346614698301547113745870652015256321125152192280987548;
    
    uint256 constant IC6x = 5665595121206207292849824301873339979686188518186126970648977429213717219136;
    uint256 constant IC6y = 15571966659128142481801827841678850936888292413593742082510230154308730081891;
    
    uint256 constant IC7x = 16251088396398165895452680021659973124175449729584587756157260095473862555667;
    uint256 constant IC7y = 11857227938024175630596214253622276220711726530551265277844097856715131725236;
    
    uint256 constant IC8x = 20661854155934319947367949396682819958096545038638418283958202219336011377223;
    uint256 constant IC8y = 20719443115007711256917998684680206378515977795454387052627539883586424225562;
    
    uint256 constant IC9x = 5272198116057968973679769081971713933024150793423199475035914517243228544914;
    uint256 constant IC9y = 4202064917562456113131718479834116610756402519051314214763560976401716137326;
    
    uint256 constant IC10x = 11509666292783260521688477338457217404007186522708187461185159707894809851109;
    uint256 constant IC10y = 1302077359370803709956318567827165059692478048172366550678725839563766321984;
    
    uint256 constant IC11x = 15679139868439591403715925188476604138194608774349304161581917151364238001700;
    uint256 constant IC11y = 19140475106623095516433021250372620305966845376951134047996741499351365254389;
    
    uint256 constant IC12x = 3849774979180379957121664039584603598767450361732793281786602047159086659261;
    uint256 constant IC12y = 10838578776967428889916321972967137823572614938505495932247333435910720170574;
    
    uint256 constant IC13x = 20665838125389974019262098750533147451010161341861792056775761221859658477952;
    uint256 constant IC13y = 11869378151352193883553622403467859259124266043429834706561699823855477437111;
    
    uint256 constant IC14x = 5198296952489230271223809399208638532747598537978250525852391496038281763873;
    uint256 constant IC14y = 20001534133737805841308567019591206808841118719992184134208884981760048878317;
    
    uint256 constant IC15x = 18892889927518265326540342136360356862189497115546973173828876256181432978878;
    uint256 constant IC15y = 7903127926587703305519282702359889676602619971487082039959560438029218393509;
    
    uint256 constant IC16x = 14110932329133061006377528670426282825798964689826690435082785891053229454702;
    uint256 constant IC16y = 12596162998321170058235632869534730739097596241742984435977237656780362695859;
    
    uint256 constant IC17x = 10960850723343626366305445593605994365381633285580114419937352790731424084350;
    uint256 constant IC17y = 379812051793974152158393314153931510121243113481500720351688160464399688752;
    
    uint256 constant IC18x = 11202304767386431590685978979117278071558653483572275698478295849116964402912;
    uint256 constant IC18y = 4158510073362210297084420922039919783618792121393537966394731368117954519487;
    
    uint256 constant IC19x = 10768284132650932866302587127153206922793371984146857084050467984725960431300;
    uint256 constant IC19y = 12739198119202357232829500154054425869308963368864895175044366387813690856097;
    
    uint256 constant IC20x = 17017347822238054957021581430047030427763581344966378855506336317364528459646;
    uint256 constant IC20y = 13928965346230396090153957537484762118781274359989164851314628121750666428190;
    
    uint256 constant IC21x = 5124786609734064284244703575106363351373653135448816397879087351435559560863;
    uint256 constant IC21y = 19950166670933846989271300057002706816968658838335781998832570530981308279898;
    
    uint256 constant IC22x = 7683303663057779203298394268090443701477863147338747901264014128337964323642;
    uint256 constant IC22y = 8236336044752309384794803207506703508551643239433070438169092329386710945832;
    
    uint256 constant IC23x = 15587697886186577203102809279759918969288795896485239022476528152261257308466;
    uint256 constant IC23y = 12516334165324984864985821618476951292237483133710791036443002964643809372604;
    
    uint256 constant IC24x = 7120033006502315167390876846749809120174012609945885459573492921643883346144;
    uint256 constant IC24y = 10526287315783929457046259589136653211835294185764122533906685709783591951293;
    
    uint256 constant IC25x = 14350808904679666808941140503356430353321391778170898441483040754536801189070;
    uint256 constant IC25y = 17557863279909747833960449003210995638424196697979131373768445675444334662890;
    
    uint256 constant IC26x = 10944848816209502314813197659774580177062008021237321126455846721065584342636;
    uint256 constant IC26y = 10401022615204494546111196677823784113249158824280832709396360404134562828771;
    
    uint256 constant IC27x = 6363493817196460968329073777288096010134590069172337290145878544850773657051;
    uint256 constant IC27y = 21358692621649672829941976477820880807069108474709037673320336210323973734585;
    
    uint256 constant IC28x = 6514228051785044820196553371312027419496660199466199469730321071960736810722;
    uint256 constant IC28y = 768520698577552092300567315172939028739138065251302490648822351577815822802;
    
    uint256 constant IC29x = 10681308343128292407338481465298479135804038226645713625061435737536611285396;
    uint256 constant IC29y = 19679870979854456159877673962343401202338646983688238171328367164722047398247;
    
    uint256 constant IC30x = 13298331104862563889154594005072185799595415854354279042661183459949464289037;
    uint256 constant IC30y = 17332719044078420394011492006161926040215492996778299631944719966888062266155;
    
    uint256 constant IC31x = 12457117379587405437435608429267458051399054643134003126502363133367544548740;
    uint256 constant IC31y = 14785684047350804145080191545964060540242055529913810018165357818764084796927;
    
    uint256 constant IC32x = 21131694060904108595475768474770151317423434461966743031161769237768479293846;
    uint256 constant IC32y = 4200781926176292671504146973801753336223402248717721239986011308762900691681;
    
    uint256 constant IC33x = 792174018800789004045688094567780775799983794703443284319694227970391839797;
    uint256 constant IC33y = 21314577280279580972257716574429145718382000256584871714499321534549411332404;
    
    uint256 constant IC34x = 15554775667135303452429396713525072672318099714200462751788867703592037686865;
    uint256 constant IC34y = 5735379566525287615990278795255179203993911221959364446708927971324859626933;
    
    uint256 constant IC35x = 15800902805483962747817043374428143555549093349741601436962879519906754173062;
    uint256 constant IC35y = 3425014297656750011919568929406899226804981895052153803348076079774992916805;
    
    uint256 constant IC36x = 13151625595504861470803933193400789396392936758806872154623713201451971489149;
    uint256 constant IC36y = 15725374984963018710475735141493810080246943987802609303223408667605484156402;
    
    uint256 constant IC37x = 15355612329785754490797984473956056197196754875014300099755943359380072709962;
    uint256 constant IC37y = 15838947546085086518357288027196376360718686294520189598217715046982763684872;
    
    uint256 constant IC38x = 16414301725653550526080363612087281508092605502545638785526918001910172944153;
    uint256 constant IC38y = 17159899748793142703830817749426682587908259970569208386519289203044827759581;
    
    uint256 constant IC39x = 17608996247182952634851858811836187040092006354325662799411755699794662780605;
    uint256 constant IC39y = 15762918489190135951937373778936349337898919969381799341198980612961535113989;
    
    uint256 constant IC40x = 7243102346883771698057549598091229556279819612538067911831338279830463450785;
    uint256 constant IC40y = 3618499515699480162311522242075085404395878914415362318395362679829386976296;
    
    uint256 constant IC41x = 21794965045097572900779002723019493976437585551985572819726936969443833677652;
    uint256 constant IC41y = 9834040857026290919492197093511819603919467418317303405144837576094972342347;
    
    uint256 constant IC42x = 10517080229993100230700896544192676264911554812341496088555180762978794292523;
    uint256 constant IC42y = 9638489864948712452495776930540654073420054340609602229822619807319545151077;
    
    uint256 constant IC43x = 10935845976285419124167228039728715904219731998261789908931497904716162785301;
    uint256 constant IC43y = 8885722872943772974198524108490526280774527561642555904472700892603282269392;
    
    uint256 constant IC44x = 2823259414807107655586270315944905771343380288235482942065424063802629015948;
    uint256 constant IC44y = 2515293807029827658247813838605681795227048234368821232681646111674363510613;
    
    uint256 constant IC45x = 21130240093289193469664988501757993723200418231151900491061998251095871355107;
    uint256 constant IC45y = 15597727099589513636369466867327995552821627018570544228926972698332297064730;
    
    uint256 constant IC46x = 2216021229439606114511749835362984485102799182044782493313191921496880608551;
    uint256 constant IC46y = 11439304487971277700317758041613713893689211938348487584443187155776587464564;
    
    uint256 constant IC47x = 12603787807347161633909642026777943993868626633486210641711246431850455194610;
    uint256 constant IC47y = 18025922257313272558671746153635002726640963209426311604328000599955125979160;
    
    uint256 constant IC48x = 21436882528001464043159061769753607383321969621702539265993574597643647168635;
    uint256 constant IC48y = 3805977491464200890697515598399117066205090060062060403269295840918762673020;
    
    uint256 constant IC49x = 1510180586216792739204271852559560266874686344537138662174760786492653423384;
    uint256 constant IC49y = 18009828594137273267583356084115701655305783633642132095371767264032400989760;
    
    uint256 constant IC50x = 5584279026310062312128596879101171831116097513480878279350319019049105890897;
    uint256 constant IC50y = 13264421880282328178282409617067849823599793238610517435334669093863323651651;
    
    uint256 constant IC51x = 12456003698846384671363567763382434239374994255388124718403607153181130046372;
    uint256 constant IC51y = 2236510825484648286336582534087946923389769664037951686314937921298742728803;
    
    uint256 constant IC52x = 4412392528806710665930733176670966288164178293417405104149668315148130284138;
    uint256 constant IC52y = 4028781400298287764004908603101398524948832052422144672346301557148075496408;
    
    uint256 constant IC53x = 4406614240485827332401182314944461492990095303752891886745931460960464502787;
    uint256 constant IC53y = 15902814427583925847141346526072132684648212722224911678425684796465406546092;
    
    uint256 constant IC54x = 7526441708167710012687812802043515800198265668417247029865197495123153604974;
    uint256 constant IC54y = 20822049408784321225126935643609123161697926867480675738766451627367760932596;
    
    uint256 constant IC55x = 18193976892345641739093036570428354094053415811002939024540604295529602638653;
    uint256 constant IC55y = 17570257958638442099682475476006815346104866677222399859731138340676780402158;
    
    uint256 constant IC56x = 17751136243699120932496093865984348507896403728805998390459790028029574993367;
    uint256 constant IC56y = 222509348121654766564397032643294336310263707920446155647444334289798838390;
    
    uint256 constant IC57x = 21194579093544794417238045427758881669455069364952544340943843652431933204710;
    uint256 constant IC57y = 21880578768367519171844243700660116472171229789364687833528980832711569264951;
    
    uint256 constant IC58x = 18386510869239587906305337679482059238811319121828232013073609378097093940903;
    uint256 constant IC58y = 11218748145280757964411212347662303246219068969836114338851979183476295527555;
    
    uint256 constant IC59x = 21134575602244523399317857291073216533836953439161822974245567884949435701323;
    uint256 constant IC59y = 17533484535981472650830782476697637112284345527772751889553450956684799295719;
    
    uint256 constant IC60x = 134063691631064501607167329271733252268014916436598947602570190811243171922;
    uint256 constant IC60y = 5752216953150750168618299490725836074111750741083924001586234542887107905977;
    
    uint256 constant IC61x = 16002463722718591341573494279429651121079060284904625366664360128569103876171;
    uint256 constant IC61y = 13065295821161743749508115254096068617491566795978396474408462281341419153507;
    
    uint256 constant IC62x = 7405578822316516138184474854469270835703537965691562401373697830121533399173;
    uint256 constant IC62y = 11982802816025577727754233570807243047095051767296649013599049697340958328122;
    
    uint256 constant IC63x = 20587341965164834010406713084991825360583086957865955524351873952766584586889;
    uint256 constant IC63y = 9422184475989154349242491943097172106086334869518437346956942194031031052170;
    
    uint256 constant IC64x = 1324368651835150788682186595018519450944370771942363928901066241607892035971;
    uint256 constant IC64y = 13148172812318600649360493174605777692181399338797259244594166349858920620619;
    
    uint256 constant IC65x = 19079973643855719885868805944106356457845496405173436887861508331408453452233;
    uint256 constant IC65y = 876747384516680482307127179679188334675237376352454290372056923878492301253;
    
    uint256 constant IC66x = 2338363771540076403276133555486718156264900383519823395112842975789110966704;
    uint256 constant IC66y = 19162242871052379402381613251229557712490988008246703970822406132478068480908;
    
    uint256 constant IC67x = 21477539562157811835797725327412806682621240131600490573067223693041334807925;
    uint256 constant IC67y = 21332454697055214240871527309051386533379004162615242755156470057465180111531;
    
    uint256 constant IC68x = 21516733565021986783959634268573241100495883723594577231890084110046046383748;
    uint256 constant IC68y = 5236859547862208651916035400548155892760178966985600494507607597776299680404;
    
    uint256 constant IC69x = 9448275658790641524543159684685612401522316184091126791414911289036222328615;
    uint256 constant IC69y = 7993346401622139601449995614237122396314552235602111757284790562472651402907;
    
    uint256 constant IC70x = 10228447107180439065905361554363075095095538098287465601843685001739823299246;
    uint256 constant IC70y = 15504851607651589653562801867249526152633002979619018843257924404431416344619;
    
    uint256 constant IC71x = 3966915495437796405866030491116160639740356748504571890093957574413225997446;
    uint256 constant IC71y = 7959944240494025307311036889867835467043867170425465046284632320212921792533;
    
    uint256 constant IC72x = 18284803323570606087210063725608818694972571764013683945622153939866190792829;
    uint256 constant IC72y = 1910001093067697755691907903534539963723061834416460001495562572455606956796;
    
    uint256 constant IC73x = 10553376299456002082079704200833456424738543858188313582522619146400773081217;
    uint256 constant IC73y = 14504819130699032832412953897397257297457140775298113841077041781848068440622;
    
    uint256 constant IC74x = 6146677369569994921369203055634441400999637533073187476982558325671402738791;
    uint256 constant IC74y = 17882299242276584266672222200671577132674553185449770960392771203608084315762;
    
    uint256 constant IC75x = 12346367556782672530603230772599988011191408783176877029829863502106147983635;
    uint256 constant IC75y = 14262333388777624770669805824278543904117256514109603272649402201097339652833;
    
    uint256 constant IC76x = 4137612253060521035594629376115535243995488332711540025418166235475726769239;
    uint256 constant IC76y = 6342584693231674027303025864988211525567959652558254670595631668314531112164;
    
    uint256 constant IC77x = 5408874251755096789505517318313887471541234795047203745722413798007874218401;
    uint256 constant IC77y = 1747762479362184785461438649793803153109268238645658219527855973251975731900;
    
    uint256 constant IC78x = 9801267236535583855344499678122746861466754034551059626859710369529458756407;
    uint256 constant IC78y = 7536282102122841598717707776548262020404503367616323692322454896311972324649;
    
    uint256 constant IC79x = 7668384098665372757857995964869644461737236217724556944181171341897345751851;
    uint256 constant IC79y = 15883219247268504402455954106389486652942839344585872041786112226365620070487;
    
    uint256 constant IC80x = 21390916691348495929941434397138317088365538406485641635502121885066204569942;
    uint256 constant IC80y = 16056619565178760439199050234221870307053393629128266208165622513946519446311;
    
    uint256 constant IC81x = 19578911362561940360451920701729390690516660025136754293154691736292918393964;
    uint256 constant IC81y = 2812853842090064200660274120534955272034482484650946261738932639445000595356;
    
    uint256 constant IC82x = 5351798805277749031266877355067164250646700501402873872903288982057026190428;
    uint256 constant IC82y = 11644813478715729853346931865629036575678106713587311632051979751494019209124;
    
    uint256 constant IC83x = 18652452716792487029563622170344422316685316262842022289372648300304479012131;
    uint256 constant IC83y = 243488353972799522129787670677676396320317335593606562409411052181567994058;
    
    uint256 constant IC84x = 14637401298201168186599384547964615989454831155726357925233090573332267416597;
    uint256 constant IC84y = 1665676849392460108654301713636380446368214691300924340423090493299768475114;
    
    uint256 constant IC85x = 5284255791105231284403757501691511999447241710826073328785079381522647724024;
    uint256 constant IC85y = 3841685522435629975997235137379518308805937487863411125203478286179440238508;
    
    uint256 constant IC86x = 7847538543539554478523291577660597809779706105738889144153336335641757540699;
    uint256 constant IC86y = 14278674287364304288201779712519524433383705667924173980259305130305038239497;
    
    uint256 constant IC87x = 11058884020304410683737674731607561193956450129126125920653730338460298678439;
    uint256 constant IC87y = 4482030634430914165000349521873810836586214074456319476570672299621041713674;
    
    uint256 constant IC88x = 2411950856493017742601969385509985883836611784944558606962716104291801130245;
    uint256 constant IC88y = 13360375440364174294320133637237203713635754921926990471387712074581592065590;
    
    uint256 constant IC89x = 1266686365904906414228734171839922078698353945406556985741314555231073994956;
    uint256 constant IC89y = 11023807634680028394570506147587239607199212825314292644723584791763930238222;
    
    uint256 constant IC90x = 20443133381774299687718132164272868494565859860975011350120671812822158361998;
    uint256 constant IC90y = 5201344233592136653147832684189577758472953789454924547331364857917063195169;
    
    uint256 constant IC91x = 13252377194050951135367628457864001252181086103253526559235846394894612782976;
    uint256 constant IC91y = 2055017322646668384097111830580567566098171348420920373053141131575238886060;
    
    uint256 constant IC92x = 2462021629936757399477326303583964598513557489064179784592770793657906621772;
    uint256 constant IC92y = 14027399866905595857020974641448639961651010257659808148756508261934826312370;
    
    uint256 constant IC93x = 19030663547198752790019049490608677928126714692120530004786878159058892626310;
    uint256 constant IC93y = 16367339520846112781896471374393679800054855086961888381786689979942276131034;
    
    uint256 constant IC94x = 18678647753950674671973270435129919603567013747668453491717316418730436448147;
    uint256 constant IC94y = 8372179274085057360826153907439397069101269389036765695260881871588259327077;
    
    uint256 constant IC95x = 503175940612915022728074722411785679866511570683665522682206767080246078551;
    uint256 constant IC95y = 11228002496684273770676563871090454818971569662045803106676035314501599307248;
    
    uint256 constant IC96x = 13887288136081969108413877156627664857862797795205828231634454811653518936335;
    uint256 constant IC96y = 17713841415864734808435279359124825776533883634675539359652867898220233857466;
    
    uint256 constant IC97x = 21397045583221064735973852947988440503540944347290745704930784988078914554382;
    uint256 constant IC97y = 21739500513293614061874626198677227275931033532405750274909570331069557658853;
    
    uint256 constant IC98x = 15438642025378541152650774687760104197249357628290868887586320051231779559279;
    uint256 constant IC98y = 17272644206739856321957752383439838704181330238019213672648788964608156106455;
    
    uint256 constant IC99x = 6098846551520951160168420006470664363612408461403243369101808550739274013654;
    uint256 constant IC99y = 21354893584543487428620597673136191337685314344537333759146094201923086904641;
    
    uint256 constant IC100x = 18849684615886913611270413838978969149117507341760295287383952420454101334701;
    uint256 constant IC100y = 6405984712777554252580976191235056181055015750227143832639078021706454131395;
    
    uint256 constant IC101x = 20258092584931428083371114630050742714940577679051064793954138820818789145927;
    uint256 constant IC101y = 9827442591436066430248441358287247445259925909214956941047409023794149647534;
    
    uint256 constant IC102x = 14947597115338456524536659624782196886082024594717147910158686914612565259681;
    uint256 constant IC102y = 16107882780669420709910973773152138144687206648769095240888918845563018086910;
    
    uint256 constant IC103x = 9625849594263324892471580202783668897393963725336872343181046033515161642578;
    uint256 constant IC103y = 2612076768268884896245941782992421654366419774660256733504083053551556450354;
    
    uint256 constant IC104x = 1282839517102552967444211664646863488540313944096857815134667799875315109159;
    uint256 constant IC104y = 12922970188360068751545229156210505203378953269085252091189539622909734983424;
    
    uint256 constant IC105x = 7813359819359769074243587214433482186323369082432183487167484391900226158874;
    uint256 constant IC105y = 2354403167097294984279282578704060673726312827186223764557090931734374767635;
    
    uint256 constant IC106x = 419514823611101687841317967435797956473162465147605730559834706541581201368;
    uint256 constant IC106y = 3899598349270257522578241640192301765233119888816692782020648563329726554057;
    
    uint256 constant IC107x = 17630514980446681212709525238587986536006977998849923930703164551506251736259;
    uint256 constant IC107y = 17952827003228669113762660320349847831159931427765639636803584004939427740480;
    
    uint256 constant IC108x = 17573501901901255944796558502705267791865885483688015636748449237118637727528;
    uint256 constant IC108y = 15669113327722577199106501192820713710590236243841771612826493499572803471583;
    
    uint256 constant IC109x = 7092860891188348071214834525060621315878022047829003246362315219426253171319;
    uint256 constant IC109y = 11176078935245494115616563692287727235001361964664365677713972100914561443142;
    
    uint256 constant IC110x = 14361138529811634664190748037193210294943750907573346175836969532700809130584;
    uint256 constant IC110y = 615677651048947658865469006020179276697878956634556187964975443371260470244;
    
    uint256 constant IC111x = 21522413147062742068507150388884290552696432196615680888168995323963577478550;
    uint256 constant IC111y = 12535546285380545515049089987990205999325381216704415099756973262843039959430;
    
    uint256 constant IC112x = 4235610509685267419212755523664346534062147259765240095553505654043525797194;
    uint256 constant IC112y = 13531078694419465513217257538265259096085910355348012055420270272267440512834;
    
    uint256 constant IC113x = 2343080832965767241738285168674041601113698060482981876368956046049803050884;
    uint256 constant IC113y = 2114076763865505661628388292556039410823073399491702720668944037507781329701;
    
    uint256 constant IC114x = 19728641821943056901348598618110872648764397574788147915294437933366850318148;
    uint256 constant IC114y = 4669348822985599341968643087540978552585079141124740913558069421618796431692;
    
    uint256 constant IC115x = 5972059576095027810107731340117256574758641005988005190936347336399077327683;
    uint256 constant IC115y = 15292298352800582953831612129920998455771672896138682190738225095249133559720;
    
    uint256 constant IC116x = 15416774382153930427987898341722634154983145826669071075400521126465207377788;
    uint256 constant IC116y = 20584238943376756322846911140941507971429302655992812962917863281503438980014;
    
    uint256 constant IC117x = 814142968166879065251256834617866412984836308608206747452375551510806765773;
    uint256 constant IC117y = 8728098077195540168678293835812150896885172094005931786756932238940729319199;
    
    uint256 constant IC118x = 17149898838669883883678803527909200737899482221027114384185686262638341148043;
    uint256 constant IC118y = 7255818025502897078216958215035709657723179506496167982772306114637545182790;
    
    uint256 constant IC119x = 15325703250102714343064078041747649356914903820387018705322993994032453537047;
    uint256 constant IC119y = 17875397581197460174611478853538827461724935254130410468642771336008895941307;
    
    uint256 constant IC120x = 11815981672952138702065334117672360150027922475624372642343896050773851696177;
    uint256 constant IC120y = 8289914430772719324014722171099940044567004948585906945459354446838858029746;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[120] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                
                g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))
                
                g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))
                
                g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))
                
                g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))
                
                g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))
                
                g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))
                
                g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))
                
                g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))
                
                g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))
                
                g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))
                
                g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))
                
                g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))
                
                g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))
                
                g1_mulAccC(_pVk, IC116x, IC116y, calldataload(add(pubSignals, 3680)))
                
                g1_mulAccC(_pVk, IC117x, IC117y, calldataload(add(pubSignals, 3712)))
                
                g1_mulAccC(_pVk, IC118x, IC118y, calldataload(add(pubSignals, 3744)))
                
                g1_mulAccC(_pVk, IC119x, IC119y, calldataload(add(pubSignals, 3776)))
                
                g1_mulAccC(_pVk, IC120x, IC120y, calldataload(add(pubSignals, 3808)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            
            checkField(calldataload(add(_pubSignals, 3296)))
            
            checkField(calldataload(add(_pubSignals, 3328)))
            
            checkField(calldataload(add(_pubSignals, 3360)))
            
            checkField(calldataload(add(_pubSignals, 3392)))
            
            checkField(calldataload(add(_pubSignals, 3424)))
            
            checkField(calldataload(add(_pubSignals, 3456)))
            
            checkField(calldataload(add(_pubSignals, 3488)))
            
            checkField(calldataload(add(_pubSignals, 3520)))
            
            checkField(calldataload(add(_pubSignals, 3552)))
            
            checkField(calldataload(add(_pubSignals, 3584)))
            
            checkField(calldataload(add(_pubSignals, 3616)))
            
            checkField(calldataload(add(_pubSignals, 3648)))
            
            checkField(calldataload(add(_pubSignals, 3680)))
            
            checkField(calldataload(add(_pubSignals, 3712)))
            
            checkField(calldataload(add(_pubSignals, 3744)))
            
            checkField(calldataload(add(_pubSignals, 3776)))
            
            checkField(calldataload(add(_pubSignals, 3808)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
