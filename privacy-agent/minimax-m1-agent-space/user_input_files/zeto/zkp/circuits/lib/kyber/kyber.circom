// Copyright 2025 Guru Vamsi Policharla
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma circom 2.2.2;

include "half_ntt.circom";
include "sha2/sha256/sha256_hash_bytes.circom";
include "sha3/sha3_bits.circom";

template samplePolyCBD(l,eta) {
    var n = 256;
    var q = 3329;
    assert(l == 2*eta*n);

    signal input b[l];
    signal output a[n];

    var x = 0;
    var y = 0;
    for(var i = 0; i < n; i++) {
        for(var j = 0; j < eta; j++) {
            x += b[2*eta*i + j];
            y += b[2*eta*i + j + eta];
        }
        a[i] <== FastSubMod(q)([x,y]);
        x = 0;
        y = 0;
    }
}
    

template kpke_enc() {
    var q = 3329;
    var n = 256;
    var k = 2;

    var eta1 = 3;
    var eta2 = 2;
    var du = 10;
    var dv = 4;

    var l1 = 2*eta1*n;
    var l2 = 2*eta2*n;

    signal input randomness[n];
    signal input m[n]; // entries in {0,1}

    /*
        Sample y, e1, e2 as follows:
        y  is a 512-byte string, generated with two PRF calls
        e1 is a 512-byte string, generated with two PRF calls
        e2 is a 256-byte string, generated with a single PRF call
        In the K-PKE spec, N is incremented for each PRF call.
        We manually increment N by defining variables 'zero' through 'four.'
    */

    var zero[8] = [0,0,0,0,0,0,0,0];
    var one[8] = [1,0,0,0,0,0,0,0];
    var two[8] = [0,1,0,0,0,0,0,0];
    var three[8] = [1,1,0,0,0,0,0,0];
    var four[8] = [0,0,1,0,0,0,0,0];

    signal shake_input_bits[5][33*8];
    for (var i=0; i<32*8; i++) {
        shake_input_bits[0][i] <== randomness[i];
        shake_input_bits[1][i] <== randomness[i];
        shake_input_bits[2][i] <== randomness[i];
        shake_input_bits[3][i] <== randomness[i];
        shake_input_bits[4][i] <== randomness[i];
    }
    for (var i=0; i<8; i++) {
        shake_input_bits[0][i+32*8] <== zero[i];
        shake_input_bits[1][i+32*8] <== one[i];
        shake_input_bits[2][i+32*8] <== two[i];
        shake_input_bits[3][i+32*8] <== three[i];
        shake_input_bits[4][i+32*8] <== four[i];
    }
    
    signal prf_y[2][l1]; 
    prf_y[0] <== SHAKE256(33*8, l1)(shake_input_bits[0]);
    prf_y[1] <== SHAKE256(33*8, l1)(shake_input_bits[1]);

    signal prf_e1[2][l2];
    prf_e1[0] <== SHAKE256(33*8, l2)(shake_input_bits[2]);
    prf_e1[1] <== SHAKE256(33*8, l2)(shake_input_bits[3]);

    signal prf_e2[l2];
    prf_e2 <== SHAKE256(33*8, l2)(shake_input_bits[4]);
    
    signal y[2][n];
    signal e1[2][n];
    signal e2[n];

    y[0] <== samplePolyCBD(l1,eta1)(prf_y[0]);
    y[1] <== samplePolyCBD(l1,eta1)(prf_y[1]);

    e1[0] <== samplePolyCBD(l2,eta2)(prf_e1[0]);
    e1[1] <== samplePolyCBD(l2,eta2)(prf_e1[1]);

    e2 <== samplePolyCBD(l2,eta2)(prf_e2);

    signal y_hat[2][n];
    y_hat[0] <== halfNTT()(y[0]);
    y_hat[1] <== halfNTT()(y[1]);

    // NTT-ed and transposed public key matrix A
    var a[2][2][n];
    a[0][0] = [92,1512,234,447,2987,1156,2660,3092,2200,1926,171,2290,951,3072,1078,123,691,437,3216,1758,1633,1528,2878,3283,765,1555,864,487,2737,979,1867,2886,806,656,2944,1821,2664,837,761,2194,1249,696,2157,439,1826,1693,371,733,2472,343,2067,1662,1714,1927,1926,1691,1602,2422,3118,3184,842,2156,1715,2003,1971,2353,2263,3207,1432,3184,1782,676,1801,3319,1359,226,2076,3232,422,3021,1834,56,2787,1554,509,1708,2381,2252,1397,2326,2181,2838,964,1563,1509,284,1127,2094,601,2918,1128,1193,1484,1657,2513,136,249,2623,1294,3089,1581,1630,3107,1103,2309,883,1861,724,790,414,2577,3296,2562,1826,2016,701,2870,1314,2815,986,627,1727,3040,3128,320,939,2663,977,1304,1359,1380,1013,982,2028,2587,2284,1568,3213,1248,1480,2350,2505,745,279,493,2896,1654,2265,41,768,2420,3003,110,3057,220,1204,2558,1097,2969,753,2560,2942,2232,2287,2143,95,1327,150,937,1011,316,1410,1342,539,2102,2355,687,1276,2229,479,2605,487,115,3060,2609,827,111,2098,1669,2340,527,1564,803,1396,2538,3153,1364,1000,2006,321,289,295,258,2096,2055,552,491,196,340,716,1641,2234,48,1599,3162,729,57,2995,2855,397,1711,1338,518,2678,355,295,1251,1406,1388,233,42,2089,2077,573,1896,2099,583,1003,3082,179,177,1639,1267,1873,443,1951];

    a[0][1] = [1124,537,1913,2794,1340,509,339,2618,2346,579,2109,2683,1185,1812,3314,1698,543,2543,3058,411,644,3313,2421,1381,3238,3286,1984,871,2603,3091,1742,255,454,1795,1729,47,2383,373,1175,376,680,1304,319,2991,1619,22,49,692,2959,1901,950,1450,794,2806,1171,973,2468,712,2286,770,623,195,1173,546,782,535,1571,1527,1784,2625,2708,2956,1498,2899,2069,2394,1068,2226,1548,3142,2081,237,2594,2154,2448,1779,48,2567,740,1441,2190,2996,1633,1406,2129,153,1354,1550,2197,397,319,2272,2046,2934,754,1225,1534,3077,3036,1198,2748,2422,2545,142,2159,2084,240,507,2601,759,2466,250,965,1235,3296,878,1915,3285,3226,2318,2446,641,1044,2510,3011,1788,2202,1249,2825,166,1346,1612,2047,1000,1109,1709,2724,2287,1105,211,1575,1169,1933,763,2963,3092,676,482,256,83,608,1834,2950,664,649,2838,880,3078,1023,1043,239,3207,2626,3309,2889,307,524,48,117,2551,369,74,819,2508,1133,3080,2442,652,3062,2622,1776,3207,643,1707,1603,41,2764,1424,2531,2255,954,1092,1240,1008,1058,2379,2039,2380,325,1849,3003,94,1011,393,769,2402,3078,2126,120,1847,1832,3172,1039,1025,3001,294,1065,771,1082,489,2163,2107,1309,2703,808,1461,186,1851,1983,1789,2362,345,1005,3240,1276,1970,1386,892,182,1433,2052,1304,2716,156,818,2866];

    a[1][0] = [1643,2745,2853,528,549,1953,3120,880,642,1077,716,248,289,938,1900,1624,1272,2997,1084,1246,564,2308,3121,2186,1365,2205,2526,2950,1311,666,2597,2917,2766,273,1250,932,877,735,1563,653,151,862,653,548,2907,3232,461,2387,3039,2115,3276,2373,1706,220,552,1117,114,2253,2207,2040,1890,2262,1695,2587,2483,1067,1856,741,3093,2855,2515,2521,3226,1839,3259,2424,3044,389,1834,934,1373,2761,708,1566,1063,343,251,1251,650,2725,495,1740,1849,2716,1100,1457,649,3192,161,2627,172,781,1439,1076,2150,467,2742,2885,335,1789,688,1276,1250,2190,46,2242,906,990,2605,386,2751,1752,1212,903,1295,18,1353,216,1772,86,1886,1270,528,1550,1796,2993,776,600,702,2380,875,186,1887,2363,1759,495,2084,1204,2140,637,730,114,2492,2520,3142,537,2035,2671,2401,3248,502,2981,770,3134,3094,1892,2725,3215,1605,1662,562,1281,2937,3176,489,120,2234,2790,632,2442,1145,797,2128,2590,2538,697,2249,2862,1405,339,934,1772,2760,2252,2014,2092,1372,1305,2852,2947,1071,3112,2818,2866,1810,2447,2264,438,834,1344,1775,401,3205,31,9,2006,3226,830,892,2959,2412,1141,1656,2334,377,2567,1239,2458,1462,2132,492,2037,634,1288,2656,2924,2824,1991,2906,1925,2459,1504,371,516,836,2374,2429,248,2579,1800,2073,2792,1389,2926,1126,1454];

    a[1][1] = [2320,2292,1260,154,2159,1990,403,2475,48,1972,494,1557,765,2726,406,1626,3236,839,1692,1974,3017,1951,1825,821,1961,686,2722,1529,3242,2366,357,482,2174,2013,2698,210,1944,1572,931,2522,1271,168,2921,1960,1837,841,2774,425,225,3106,1710,834,718,3058,3235,3218,731,2127,2835,2409,1364,3122,2494,1683,2789,262,1821,1865,3319,2597,2944,1807,1415,310,1949,1872,1083,1439,2263,551,1148,1234,3320,2729,3185,142,3104,899,2921,226,139,2967,915,2845,124,2275,929,2021,109,210,921,2106,2809,1968,1940,1487,3075,3224,1376,503,1900,2292,2007,1034,2613,712,584,1454,3184,3168,1961,1518,1319,3069,987,1742,846,1654,1915,2395,778,993,1052,997,1795,2264,1877,1176,1747,2648,1379,1054,1289,963,99,1333,362,2775,1526,1396,1081,2643,2667,804,3127,1435,3030,2993,617,3101,2381,892,2600,252,2332,757,1314,1678,1918,2415,948,3230,2237,848,189,1205,2344,1171,576,517,3205,1820,1865,759,1415,1855,3277,482,432,1507,957,1091,1594,1485,173,2153,1768,1986,2332,2944,2760,1620,1028,374,2994,2886,1838,2805,236,1621,2901,3214,1298,3278,1737,415,2743,735,2899,3132,1572,411,2622,2914,1500,3136,2305,241,948,2044,2004,2580,1724,1202,2711,2884,1890,3316,75,2752,909,794,1850,3177,1201,2849,975,621,1106,1738,1950,1326,2363,2075,1310,1769];
    
    var t[2][n];
    t[0] = [2252,2895,2629,3146,1373,3066,670,904,2492,2391,1768,1463,2433,2617,486,2790,1497,2743,528,2079,2829,3146,2233,286,348,2914,1026,140,1577,2319,2160,1604,442,1068,1358,2825,2533,3136,23,764,2734,3096,1072,2277,2084,2971,1338,3244,235,1996,2139,288,2931,1173,2408,780,162,142,352,2539,1293,2438,3148,2571,2488,193,697,820,1723,1445,20,2598,1129,2266,1815,676,522,605,3167,2725,876,168,2134,384,2924,2336,2535,3148,1128,1513,477,525,2415,2411,1521,2465,2451,1702,1263,1909,831,1846,2196,1369,2085,1824,2727,2720,1016,683,1462,3255,1602,255,712,1577,2201,2707,1296,2560,677,316,1899,1573,1651,503,1378,2931,3218,1217,3238,54,2923,338,2799,1323,3225,480,670,520,904,1118,1881,1128,1528,944,1367,704,1646,293,2371,2225,1183,2321,500,41,380,113,2309,2430,3087,2592,1551,2265,2787,1946,569,3266,3302,1585,1424,2623,1172,1022,1907,2595,1150,1641,2744,2075,2987,951,1494,1577,311,342,966,2099,911,2817,291,2238,3286,2631,2247,2468,1339,1183,2185,2164,2663,2295,516,1088,1290,1183,239,176,2130,204,2135,1390,1653,3291,1176,248,2007,1271,3280,3148,2098,2188,1644,2758,3224,2561,3084,1675,1134,2628,1894,1091,704,727,3092,1651,2813,66,3046,1453,2025,1933,3265,1216,2774,1101,1129,2304,2194,1546,768,2744,2993,137,2715,3136];

    t[1] = [1780,1858,3142,2163,2639,1584,1163,2391,102,1380,2822,1872,1679,1719,99,745,1119,489,2415,843,497,2938,358,2671,1702,1450,217,2769,2567,1969,1230,88,1365,2531,2175,1676,2664,84,963,1795,1468,1244,2206,3010,1697,2170,3299,362,2582,3104,573,3034,3224,55,2536,1440,1721,518,994,1448,2336,1048,2970,2864,314,2790,706,1914,664,3023,2604,2293,1117,2215,2401,2532,400,3165,159,2039,2085,1595,1236,2313,3050,691,377,2434,1770,1596,2165,199,2543,2750,2308,780,1545,279,1512,1670,199,2414,104,1821,900,2292,2242,3318,2800,898,1258,765,167,1888,1984,339,1405,2309,2322,2383,762,714,629,1623,151,1186,2306,3078,1041,1478,2136,919,2665,3126,1397,1553,1001,1833,2135,104,2745,1526,442,2868,722,697,1596,888,2041,3173,2006,1774,3284,391,170,1090,232,59,97,355,3231,82,1726,2371,2373,799,1138,2673,999,156,1655,935,1579,3225,377,794,597,772,3140,2608,1054,2364,3093,305,3171,699,299,2329,2793,1517,2763,538,2644,2976,987,1331,2515,3040,2784,2779,1530,2931,90,778,3123,2297,1154,2006,349,553,151,709,1400,1099,3181,374,1704,1470,3004,2279,2788,62,320,738,2227,994,7,930,541,1611,975,2560,1503,1045,801,1800,365,631,1744,1649,1928,767,37,3217,2215,705,857,1366,472,2705,1304,719,1693,1687,559,1555];

    // compute u = NTTinv(A^T * y) + e1
    // intermediate values
    signal a00_y0[n];
    signal a01_y1[n];
    signal a10_y0[n];
    signal a11_y1[n];

    a00_y0 <== multiply_nttvec()(a[0][0],y_hat[0]);
    a01_y1 <== multiply_nttvec()(a[1][0],y_hat[1]);
    a10_y0 <== multiply_nttvec()(a[0][1],y_hat[0]);
    a11_y1 <== multiply_nttvec()(a[1][1],y_hat[1]);
    
    signal ATy_hat[2][n];
    for (var i = 0; i < n; i++) {
        ATy_hat[0][i] <== FastAddMod(q)([a00_y0[i],a01_y1[i]]);
        ATy_hat[1][i] <== FastAddMod(q)([a10_y0[i],a11_y1[i]]);
    }

    signal ATy[2][n];
    ATy[0] <== inv_halfNTT()(ATy_hat[0]);
    ATy[1] <== inv_halfNTT()(ATy_hat[1]);

    signal u[2][n];
    for (var i = 0; i < n; i++) {
        u[0][i] <== FastAddMod(q)([ATy[0][i],e1[0][i]]);
        u[1][i] <== FastAddMod(q)([ATy[1][i],e1[1][i]]);
    }

    // compute v = NTTinv(t*y) + e2 + m
    // intermediate values
    signal t0_y0[n];
    signal t1_y1[n];

    t0_y0 <== multiply_nttvec()(t[0],y_hat[0]);
    t1_y1 <== multiply_nttvec()(t[1],y_hat[1]);

    signal t_y_hat[n];
    for (var i = 0; i < n; i++) {
        t_y_hat[i] <== FastAddMod(q)([t0_y0[i],t1_y1[i]]);
    }

    signal t_y[n];
    t_y <== inv_halfNTT()(t_y_hat);

    signal t_y_e2[n];
    for (var i = 0; i < n; i++) {
        t_y_e2[i] <== FastAddMod(q)([t_y[i],e2[i]]);
    }

    signal m_compress[256];
    for (var i = 0; i < 256; i++) {
        m_compress[i] <== m[i] * 1665;
    }

    signal v[n];
    for (var i = 0; i < n; i++) {
        v[i] <== FastAddMod(q)([t_y_e2[i],m_compress[i]]);
    }

    signal compressed_u[2][n];
    signal compressed_v[n];

    for (var i = 0; i < n; i++) {
        compressed_u[0][i] <== ModSwitchInt(1<<du, q)(u[0][i]);
        compressed_u[1][i] <== ModSwitchInt(1<<du, q)(u[1][i]);
        compressed_v[i] <== ModSwitchInt(1<<dv, q)(v[i]);
    }

    // convert to bytes according to the spec to get c1 and c2
    signal c1[k*n*du]; // 256*2 entries in 2^10 amounts to 640 bytes
    signal c2[n*dv]; // 256*1 entries in 2^4 amounts to 128 bytes

    // convert compressed_u and compressed_v to bits using Num2Bits
    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[0][i]);
        for (var j = 0; j < du; j++) {
            c1[du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[1][i]);
        for (var j = 0; j < du; j++) {
            c1[du*n + du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[dv] = Num2Bits(dv)(compressed_v[i]);
        for (var j = 0; j < dv; j++) {
            c2[dv*i + j] <== out[j];
        }
    }

    // output ciphertext
    signal output c[n*(k*du + dv)];
    for (var i = 0; i < k*n*du; i++) {
        c[i] <== c1[i];
    }
    
    for (var i = 0; i < n*dv; i++) {
        c[i + k*n*du] <== c2[i];
    }
}