{"extracted_information": "This guide provides a developer flow and code examples for performing private token transfers on Solana using the Elusiv SDK. **Important Note:** As of February 29, 2024, Elusiv announced they would be sunsetting the platform. The protocol will remain in withdrawal-only mode until January 1, 2025.", "specifications": {"requirements": ["Node.js (version 18.16 or higher)", "TypeScript and ts-node (latest version)", "Basic knowledge of Solana Fundamentals and Zero Knowledge Proofs"], "elusiv_protocol_details": {"functionality": "Enables private transactions by managing a shared pool where users deposit/withdraw funds (public) and transfer funds within the pool (private).", "technology": "Utilizes zk-SNARKS for private transactions.", "components": ["Elusiv Program: Manages shared pool, handles deposits/withdrawals/private transfers.", "Elusiv Warden: Relays client requests, future compliance tasks (e.g., blacklisted addresses)."]}}, "pricing": {}, "features": ["Private SPL token transfer using Zero-Knowledge Proofs", "SDK helper functions for token info and test airdrops", "Ability to check and top up private balance", "On-chain verification of transaction privacy"], "statistics": {}, "temporal_info": {"elusiv_sunsetting": "February 29, 2024", "withdrawal_only_until": "January 1, 2025"}, "geographical_data": {}, "references": ["https://twitter.com/elusivprivacy/status/1763263327763841493", "https://elusiv.io/", "https://app.elusiv.io/", "https://elusiv-privacy.github.io/elusiv-sdk/", "https://www.quicknode.com/guides/solana-development/solana-fundamentals-reference-guide", "https://www.quicknode.com/guides/web3-fundamentals-security/cryptography/intro-to-zero-knowledge-proofs", "https://www.quicknode.com/guides/solana-development/getting-started/a-complete-guide-to-airdropping-test-sol-on-solana", "https://www.quicknode.com/guides/solana-development/spl-tokens/how-to-look-up-the-address-of-a-token-account", "https://docs.elusiv.io/technical-specifications", "https://github.com/elusiv-privacy/elusiv", "https://medium.com/elusiv-privacy/real-word-use-cases-for-zero-knowledge-proofs-54b63eac2b74", "https://www.npmjs.com/package/@elusiv/sdk", "https://github.com/elusiv-privacy/elusiv-samples"], "developer_flow": {"project_setup": {"create_project_directory": "`mkdir elusiv-demo && cd elusiv-demo && echo > app.ts`", "install_dependencies": "`yarn add @solana/web3.js@1 @solana/spl-token @elusiv/sdk @noble/ed25519` OR `npm install --save @solana/web3.js@1 @solana/spl-token @elusiv/sdk @noble/ed255019`", "import_dependencies": "typescript\nimport { Connection, Keypair } from '@solana/web3.js';\nimport { createAssociatedTokenAccountIdempotent } from '@solana/spl-token';\nimport { airdropToken, Elusiv, getTokenInfo, SEED_MESSAGE } from '@elusiv/sdk';\nimport { sign } from '@noble/ed25519;\n", "create_keypair": "typescript\nconst secret = [0,0,0,0,0,0,0,0,0,0,...]; // paste your secret here\nconst keyPair = Keypair.fromSecretKey(new Uint8Array(secret));\n", "fund_keypair": "Visit Solana Faucet or use `solana airdrop 1 <your public key> -ud`", "connect_to_cluster": "typescript\nconst cluster = 'devnet';\nconst quickNodeEndpoint = 'https://example.solana.quiknode.pro/012345'; // REPLACE WITH YOUR ENDPOINT\nconst connection = new Connection(quickNodeEndpoint);\n", "frame_application": "typescript\nasync function main(){\n  // code goes here\n}\nmain().catch(err => console.error(err)).finally(()=> process.exit());\n"}, "private_transfer_steps": [{"step_number": 1, "description": "Create an Elusiv instance.", "code_example": "typescript\nconsole.log('1. Creating Elusiv instance');\nconst seed = await sign(\n  Buffer.from(SEED_MESSAGE, 'utf-8'),\n  keyPair.secretKey.slice(0,32),\n);\nconst elusiv = await Elusiv.getElusivInstance(seed, keyPair.publicKey, connection, cluster);\n", "api_usage": {"Elusiv.getElusivInstance": "(seed: Uint8Array, publicKey: PublicKey, connection: Connection, cluster: string) => Promise<ElusivInstance>"}, "details": "The `seed` is generated by signing `SEED_MESSAGE` with the keypair's secret key. This seed allows decryption/spending of private assets."}, {"step_number": 2, "description": "Airdrop some \"USDC\" to our devnet USDC associated token account.", "code_example": "typescript\nconsole.log('2. Airdropping USDC');\nconst usdcInfo = getTokenInfo('USDC');\nconst oneUsdc = 10** usdcInfo.decimals;\nconst usdcMint = usdcInfo.mintDevnet;\nconst ataAcc = await createAssociatedTokenAccountIdempotent(\n  connection,\n  keyPair,\n  usdcMint,\n  keyPair.publicKey,\n  { commitment:'finalized'}\n);\nawait airdropToken('USDC', 1000 * oneUsdc, ataAcc);\n", "api_usage": {"getTokenInfo": "(tokenSymbol: string) => TokenInfo", "createAssociatedTokenAccountIdempotent": "(connection: Connection, payer: Signer, mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, commitment?: Commitment, confirmOptions?: ConfirmOptions, programId?: PublicKey, associatedTokenProgramId?: PublicKey) => Promise<PublicKey>", "airdropToken": "(tokenSymbol: string, amount: number, ataAccount: PublicKey) => Promise<void>"}, "details": "`getTokenInfo` fetches details like mint address and decimals. `createAssociatedTokenAccountIdempotent` ensures an ATA exists for the keypair and USDC mint. `airdropToken` adds test USDC to the ATA."}, {"step_number": 3, "description": "Check private balance.", "code_example": "typescript\nconsole.log('3. Checking private balance');\nlet privateBalance = await elusiv.getLatestPrivateBalance('USDC');\n", "api_usage": {"elusiv.getLatestPrivateBalance": "(tokenSymbol: string) => Promise<BigInt>"}, "details": "The Elusiv protocol handles decryption of private balances."}, {"step_number": 4, "description": "Top up private balance if needed.", "code_example": "typescript\nif(privateBalance === BigInt(0)){\n  console.log('4. Topping up private balance');\n  const topupTx = await elusiv.buildTopUpTx(500 * oneUsdc, 'USDC');\n  topupTx.tx.partialSign(keyPair);\n  await elusiv.sendElusivTx(topupTx);\n  privateBalance = await elusiv.getLatestPrivateBalance('USDC');\n} else {\n  console.log('4. Private balance top up not needed. Current Balance: ',(privateBalance / BigInt(10** usdcInfo.decimals)).toString());\n}\n", "api_usage": {"elusiv.buildTopUpTx": "(amount: number | bigint, tokenSymbol: string) => Promise<{tx: Transaction}>", "tx.tx.partialSign": "(signer: Signer) => void", "elusiv.sendElusivTx": "(transaction: {tx: Transaction}) => Promise<{signature: string}>"}, "details": "`buildTopUpTx` creates a transaction to deposit funds into the private pool. The transaction is partially signed by the sender's keypair before being sent."}, {"step_number": 5, "description": "Privately send USDC to a random address.", "code_example": "typescript\nconsole.log('5. Sending USDC to a random address');\nif(privateBalance <= BigInt(0)){\n  throw new Error(\"Can't send from an empty private balance\");\n}\nconst sendTx = await elusiv.buildSendTx(10 * oneUsdc, Keypair.generate().publicKey, 'USDC');\nconst sig = await elusiv.sendElusivTx(sendTx);\nconsole.log(`   https://explorer.solana.com/tx/${sig.signature}?cluster=${cluster}`);\n", "api_usage": {"elusiv.buildSendTx": "(amount: number | bigint, recipientPublicKey: PublicKey, tokenSymbol: string) => Promise<{tx: Transaction}>", "elusiv.sendElusivTx": "(transaction: {tx: Transaction}) => Promise<{signature: string}>"}, "details": "`buildSendTx` prepares a private transfer. A new random `Keypair` is generated as the recipient for the example. `sendElusivTx` sends the prepared private transaction."}, {"step_number": 6, "description": "Verify that our keypair was not in the transaction.", "code_example": "typescript\nconsole.log('6. Checking if our keypair was in the transaction');\nconst txDetail = await connection.getTransaction(sig.signature, {\n  commitment:'confirmed',\n  maxSupportedTransactionVersion:0\n});\nconst readonly = txDetail?.meta?.loadedAddresses?.readonly ?? [];\nconst writable = txDetail?.meta?.loadedAddresses?.writable ?? [];\nconst allAccounts = [...new Set([...readonly, ...writable])];\nconst isSenderInTx = allAccounts.some(pubKey => pubKey.toBase58() === keyPair.publicKey.toBase58());\nif(isSenderInTx){\n  console.log('❌ - Our Keypair was in the transaction (unexpected)');\n} else {\n  console.log('✅ - Our Keypair was not in the transaction (expected)');\n}\n", "api_usage": {"connection.getTransaction": "(signature: TransactionSignature, options?: GetVersionedTransactionConfig) => Promise<VersionedTransactionResponse | null>"}, "details": "This step uses Solana Web3 SDK to fetch transaction details and inspect loaded accounts (`readonly` and `writable`) to confirm the sender's public key is not visible, thus verifying privacy."}], "run_application": "`ts-node app.ts`"}}