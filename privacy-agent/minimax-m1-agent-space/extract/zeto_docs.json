{"extracted_information": "Information about 'Zeto' is not explicitly found in the provided content. However, detailed implementation details, API references, and integration complexity for Kaleido's Zero Knowledge Token service, which utilizes the Zether protocol for sending private/confidential transactions, are present. No direct code examples or detailed developer flows for sending a private transaction are provided within this content; rather, the underlying protocol steps are described.", "specifications": {"underlying_technology": "Zero Knowledge Proof (ZKP), specifically Σ-Bullets (allowing Bulletproofs to work with Sigma protocols), as proposed in the Zether paper. Kaleido's service uses an anonymous extension of Zether by Benjamin Diamond from JPMorgan’s Quorum team.", "anonymous_zether_mechanism": {"smart_contract": "Zether Smart Contract (ZSC) deployed on the network, with a 1:1 mapping between ERC20 contracts and ZSC.", "accounts": "Identified by public keys within ZSC; ZSC maintains mappings between accounts and encrypted balances.", "token_handling": "Users fund accounts with ERC20 to obtain shielded tokens (ZTH) via ZSC escrow. ZTH can be transferred confidentially or withdrawn back to ERC20.", "confidential_transfer_steps": ["Hold a private key corresponding to the ZSC account.", "Have enough ZTH balance.", "Create a confidential transfer by encrypting the value using both sender's and receiver's public keys, and a zero-knowledge range proof (proving positive encrypted value and positive balance after transfer).", "Send transaction with payload to ZSC, which updates encrypted state after proof verification."], "anonymous_extension": "Transfers encrypt '0' by public keys of additional participants (decoys) along with a random number.", "withdrawal_steps": ["Create a zero-knowledge proof for knowledge of account balance without revealing the private key.", "Send transaction with proof to ZSC, which credits ERC20 tokens back to the user’s Ethereum address registered with the shielded account."]}, "transaction_processing_epochs": {"purpose": "Protection against front-running and replay attacks.", "mechanism": "Transfers are put into pending state during an epoch and only applied in a future epoch when the account tries to spend funds.", "epoch_validity": "A transfer or burn proof is successfully verified only in the same epoch it was generated for; proofs become invalid if sender's state changes.", "epoch_length_considerations": "Must be greater than sum of proof generation time, proof verification time, and propagation time. Should be greater than block period for multiple blocks within an epoch.", "current_epoch_setting": "15 seconds for Raft and IBFT (subject to change). Epochs start at a multiple of 15 seconds since Unix time Epoch.", "state_download_recommendation": "Download current state from ZSC as close to the beginning of the current epoch as possible."}, "anonymity_set": {"size_impact": "Anonymity feature comes at a cost, with proof generation and verification time being O(N*logN) and proof size O(N), where N is the anonymity set size.", "recommended_size": "Size of 8 for optimal performance.", "current_implementation_constraint": "Only allows anonymity sets of size 2^k for k>=1, for efficient proof generation.", "best_practice": "Include funded keys as decoys; avoid withdrawing from an account until it has been part of many transfer transactions."}}, "pricing": {}, "features": ["Confidential token transfer using Zether protocol.", "Anonymous token transfer via Anonymous Zether extension.", "On-chain verification of confidential transfers.", "Epoch-based transaction processing for security.", "Support for ERC20 token escrow and shielded ZTH tokens.", "Zero-knowledge range proofs for transaction validity.", "Private account management within ZSC.", "Flexibility for future support of multiple shielded accounts per Ethereum account."], "statistics": {"anonymity_set_performance_metrics_size_8": {"proof_generation_time": "Approximately 2200 ms", "proof_verification_time": "Approximately 135 ms", "gas_consumption": "Around 27 million gas", "source": "AnonZether documentation"}, "max_achievable_throughput": "Number of accounts / epoch (one transfer-out per account per epoch, multiple transfer-in possible).", "epoch_length": "15 seconds for Raft and IBFT.", "kaleido_block_gas_limit": "TargetGasLimit set to maximum value to avoid performance bottleneck."}, "temporal_info": {"epoch_length": "Currently 15 seconds.", "epoch_start_time": "Multiple of 15 seconds since Unix time Epoch.", "future_changes": "Epoch length is subject to change, but will be clearly documented."}, "geographical_data": {}, "references": [{"name": "Zether paper", "url": "https://eprint.iacr.org/2019/191.pdf"}, {"name": "Anonymous Zether work (GitHub)", "url": "https://github.com/ConsenSys/anonymous-zether"}, {"name": "AnonZether documentation (PDF)", "url": "https://github.com/ConsenSys/anonymous-zether/blob/master/docs/AnonZether.pdf"}, {"name": "Kaleido API Reference for Zero Knowledge Token", "url": "../../../api/tokenzkp/"}]}